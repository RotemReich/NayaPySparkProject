version: '3.2'

# docker compose up airflow-init
x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.8.4}
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
        # yamllint disable rule:line-length
        # Use simple http server on scheduler for health checks
        # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
        # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
        # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
        # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- apache-airflow apache-airflow-providers-microsoft-mssql apache-airflow-providers-snowflake sqlglot pandas snowflake-sqlalchemy==1.5.1 pymssql==2.2.11 apache-airflow-providers-microsoft-mssql kafka-python}
    
    #Start >>> Rotem Reich: AWS environment variables
    AWS_ACCESS_KEY_ID: ${MINIO_ROOT}
    AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT}
    #End >>> Rotem Reich: AWS environment variables

  volumes:
    - ./volumes/airflow/airflow_data/dags:/opt/airflow/dags
    - ./volumes/airflow/airflow_data/logs:/opt/airflow/logs
    - ./volumes/airflow/airflow_data/config:/opt/airflow/config
    - ./volumes/airflow/airflow_data/plugins:/opt/airflow/plugins
    - ./volumes/airflow/source_data/:/tmp/source_data
    - ./volumes/airflow/target_data/:/tmp/target_data
    - /var/run/docker.sock:/var/run/docker.sock #Rotem Reich: Expose Docker socket on windows
  
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

#Start >>> Rotem Reich: AWS environment variables
x-aws-env-var:
  &aws-env-var
  AWS_ACCESS_KEY_ID: ${MINIO_ROOT}
  AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT}
#End >>> Rotem Reich: AWS environment variables

services:

    minio:
        container_name: minio #user+pass: minioadmin
        image: minio/minio:RELEASE.2022-11-08T05-27-07Z
        command: server /data --console-address ":9001"
        ports:
            - "9001:9000"
            - "9002:9001"
        #Start >>> Rotem Reich additions
        environment:
          MINIO_ROOT_USER: ${MINIO_ROOT}
          MINIO_ROOT_PASSWORD: ${MINIO_ROOT}

        volumes:
            - "./volumes/minio/Buckets:/data"
        #End >>> Rotem Reich additions

    zookeeper:
        container_name: zookeeper
        image: wurstmeister/zookeeper:latest
        ports:
            - "2181:2181"

    course-kafka:
        container_name: course-kafka
        image: wurstmeister/kafka:2.13-2.8.1
        environment:
            KAFKA_ADVERTISED_HOST_NAME: course-kafka
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        ports:
            - "9092:9092"
        depends_on:
            - zookeeper

    kafdrop:
        container_name: kafdrop
        image: obsidiandynamics/kafdrop:3.30.0
        ports:
            - "9003:9000"
        environment:
            - KAFKA_BROKERCONNECT=course-kafka:9092
        depends_on:
            - course-kafka
            
    mariadb:
        container_name: mariadb
        image: mariadb:10.6
        ports:
            - 3306:3306
        environment:
            MYSQL_ROOT_PASSWORD: admin
            MYSQL_USER: admin
            MYSQL_PASSWORD: admin
            MYSQL_DATABASE: metastore_db
    
    hive-metastore:
        container_name: hive_metastore
        image: ofrir119/hive-metastore:1.0
        ports:
            - 9083:9083
        depends_on:
            - mariadb
        
    dev_env:
        container_name: dev_env #pass: developer
        image: ofrir119/developer_env:spark340_ssh
        ports:
            - "22022:22"
            - "8888:8888"
            - "4040:4040"
            - "4041:4041"
            - "4042:4042"
        #Start >>> Rotem Reich additions
        environment:
          <<: *aws-env-var
        volumes:
            - "./volumes/Spark/project:/home/developer/projects/spark-course-python/spark_course_python/project"
        #End >>> Rotem Reich additions
        
    # mongo:
    #     image: nayacollege/mongo:1.0
    #     container_name: mongo
    #     ports:
    #         - "27017:27017"
            
    # nifi:
    #     image: nayacollege/nifi:1.0
    #     container_name: nifi
    #     ports:
    #         - "8080:8080"
            
    # elasticsearch:
    #     container_name: elasticsearch
    #     image: docker.elastic.co/elasticsearch/elasticsearch:7.13.2
    #     ports:
    #         - "9200:9200"
    #     environment:
    #         discovery.type: single-node
            
    # kibana:
    #     container_name: kibana
    #     image: docker.elastic.co/kibana/kibana:7.13.2
    #     ports:
    #         - "5601:5601"
    #     depends_on:
    #         - elasticsearch
            
    postgres:
        container_name: postgres
        image: postgres:13
        environment:
          POSTGRES_USER: airflow
          POSTGRES_PASSWORD: airflow
          POSTGRES_DB: airflow
        volumes:
          - postgres-db-volume:/var/lib/postgresql/data
        healthcheck:
          test: ["CMD", "pg_isready", "-U", "airflow"]
          interval: 10s
          retries: 5
          start_period: 5s
        restart: always

    redis:
      container_name: redis
      image: redis:latest
      expose:
        - 6379
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 10s
        timeout: 30s
        retries: 50
        start_period: 30s
      restart: always

    airflow-webserver: #user+pass: airflow
      container_name: airflow-webserver
      <<: *airflow-common
      command: webserver
      ports:
        - "8080:8080"
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully

    airflow-scheduler:
      container_name: airflow-scheduler
      <<: *airflow-common
      command: scheduler
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully

    airflow-worker:
      container_name: airflow-worker
      <<: *airflow-common
      command: celery worker
      healthcheck:
        # yamllint disable rule:line-length
        test:
          - "CMD-SHELL"
          - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      environment:
        <<: *airflow-common-env
        # Required to handle warm shutdown of the celery workers properly
        # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
        DUMB_INIT_SETSID: "0"
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully

    airflow-triggerer:
      container_name: airflow-triggerer
      <<: *airflow-common
      command: triggerer
      healthcheck:
        test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully

    airflow-init:
      container_name: airflow-init
      <<: *airflow-common
      entrypoint: /bin/bash
      # yamllint disable rule:line-length
      command:
        - -c
        - |
          if [[ -z "${AIRFLOW_UID}" ]]; then
            echo
            echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
            echo "If you are on Linux, you SHOULD follow the instructions below to set "
            echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
            echo "For other operating systems you can get rid of the warning with manually created .env file:"
            echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
            echo
          fi
          one_meg=1048576
          mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
          cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
          disk_available=$$(df / | tail -1 | awk '{print $$4}')
          warning_resources="false"
          if (( mem_available < 4000 )) ; then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
            echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
            echo
            warning_resources="true"
          fi
          if (( cpus_available < 2 )); then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
            echo "At least 2 CPUs recommended. You have $${cpus_available}"
            echo
            warning_resources="true"
          fi
          if (( disk_available < one_meg * 10 )); then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
            echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
            echo
            warning_resources="true"
          fi
          if [[ $${warning_resources} == "true" ]]; then
            echo
            echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
            echo "Please follow the instructions to increase amount of resources available:"
            echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
            echo
          fi
          mkdir -p /sources/logs /sources/dags /sources/plugins
          chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
          exec /entrypoint airflow version
      # yamllint enable rule:line-length
      environment:
        <<: *airflow-common-env
        _AIRFLOW_DB_MIGRATE: 'true'
        _AIRFLOW_WWW_USER_CREATE: 'true'
        _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
        _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
        _PIP_ADDITIONAL_REQUIREMENTS: ''
      user: "0:0"
      volumes:
        - ./volumes/airflow/airflow_data/:/sources

    airflow-cli:
      container_name: airflow-cli
      <<: *airflow-common
      profiles:
        - debug
      environment:
        <<: *airflow-common-env
        CONNECTION_CHECK_MAX_COUNT: "0"
      # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
      command:
        - bash
        - -c
        - airflow

volumes:
  postgres-db-volume: